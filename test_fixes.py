#!/usr/bin/env python3
"""
test_fixes.py - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
from pathlib import Path
import platform

print(f"üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π VideoCreator Pro")
print(f"üíª –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
print(f"üêç Python: {sys.version}")
print("=" * 50)

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
try:
    from moviepy import TextClip, AudioFileClip
    print("‚úÖ MoviePy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ MoviePy: {e}")
    sys.exit(1)

try:
    import gspread
    from google.oauth2.service_account import Credentials
    print("‚úÖ Google Sheets API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è Google Sheets API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞
print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤...")
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
    sys.path.append('.')
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª text_effects_engine.py –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º inline —Ñ—É–Ω–∫—Ü–∏—é
    def test_cyrillic_font():
        test_fonts = [None, "Arial", "Helvetica", "Times"]
        
        for font in test_fonts:
            try:
                if font:
                    clip = TextClip(text="–¢–µ—Å—Ç üêè", font=font, font_size=24, color='white')
                else:
                    clip = TextClip(text="–¢–µ—Å—Ç üêè", font_size=24, color='white')
                clip.close()
                font_name = font if font else "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                print(f"‚úÖ –®—Ä–∏—Ñ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: {font_name}")
                return font_name
            except Exception as e:
                font_name = font if font else "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                print(f"‚ùå –®—Ä–∏—Ñ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {font_name} - {str(e)[:50]}...")
        
        return None
    
    working_font = test_cyrillic_font()
    if working_font:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —à—Ä–∏—Ñ—Ç: {working_font}")
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —à—Ä–∏—Ñ—Ç!")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤: {e}")

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")

required_files = [
    "videocreator_main.py",
    "text_effects_engine.py", 
    "media_engine.py",
    "logger_setup.py",
    "template_manager.py"
]

for file in required_files:
    if Path(file).exists():
        print(f"‚úÖ {file}")
    else:
        print(f"‚ùå {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets —Ñ–∞–π–ª–æ–≤
sheets_files = [
    "elevenlabs-voice-generator-9cd6aae15cf6.json",
    "google_sheets_manager.py"
]

for file in sheets_files:
    if Path(file).exists():
        print(f"‚úÖ {file}")
    else:
        print(f"‚ö†Ô∏è {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫...")
folders = ["output", "saved_templates", "logs"]
for folder in folders:
    folder_path = Path(folder)
    if folder_path.exists():
        files_count = len(list(folder_path.iterdir()))
        print(f"‚úÖ {folder}/ ({files_count} —Ñ–∞–π–ª–æ–≤)")
    else:
        print(f"‚ÑπÔ∏è {folder}/ - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å)
print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets...")
service_account_file = "elevenlabs-voice-generator-9cd6aae15cf6.json"
if Path(service_account_file).exists():
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
        import json
        with open(service_account_file, 'r') as f:
            data = json.load(f)
        
        required_keys = ["type", "project_id", "private_key", "client_email"]
        missing_keys = [key for key in required_keys if key not in data]
        
        if not missing_keys:
            print("‚úÖ –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω)
            if 'gspread' in sys.modules:
                try:
                    from google_sheets_manager import test_google_sheets_connection
                    SPREADSHEET_ID = "1FQV-3SZGYoR1z3ZY9zwmycQmoWbQ230MeKueWDjWroI"
                    test_result = test_google_sheets_connection(service_account_file, SPREADSHEET_ID)
                    
                    if test_result['connected']:
                        print(f"‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        print(f"   üìä –¢–∞–±–ª–∏—Ü–∞: {test_result['spreadsheet_title']}")
                        print(f"   üìÑ –õ–∏—Å—Ç: {test_result['sheet_title']}")
                        print(f"   üî¢ –¢–µ–º –Ω–∞–π–¥–µ–Ω–æ: {test_result['themes_count']}")
                    else:
                        print(f"‚ùå Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_result['error']}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Google Sheets: {e}")
            else:
                print("‚ÑπÔ∏è gspread –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        else:
            print(f"‚ùå –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–ø–æ–ª–Ω—ã–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_keys}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
else:
    print("‚ÑπÔ∏è –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (Google Sheets —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)")

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–¥–µ–æ
print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–ø–∞...")
try:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–ø
    from moviepy import ColorClip, CompositeVideoClip
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–æ–Ω
    test_clip = ColorClip(size=(1920, 1080), color=(50, 50, 50), duration=1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    try:
        text_clip = TextClip(text="–¢–µ—Å—Ç ‚úì", font_size=40, color='white').with_duration(1).with_position('center')
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º CompositeVideoClip –≤–º–µ—Å—Ç–æ with_overlay
        final_clip = CompositeVideoClip([test_clip, text_clip], size=(1920, 1080))
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–¥–µ–æ–∫–ª–∏–ø —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        final_clip.close()
        text_clip.close()
        test_clip.close()
        
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–ª–∏–ø –Ω–µ —Å–æ–∑–¥–∞–Ω: {e}")
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π –≤–∏–¥–µ–æ–∫–ª–∏–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        test_clip.close()
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–ø–∞: {e}")

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print("\n" + "=" * 50)
print("üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
print("‚úÖ = –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
print("‚ö†Ô∏è = –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç") 
print("‚ùå = –¢—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
print("‚ÑπÔ∏è = –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
print("1. –ï—Å–ª–∏ –µ—Å—Ç—å ‚ùå —Å —à—Ä–∏—Ñ—Ç–∞–º–∏ - –∑–∞–º–µ–Ω–∏—Ç–µ text_effects_engine.py")
print("2. –ï—Å–ª–∏ –µ—Å—Ç—å ‚ùå —Å Google Sheets - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
print("3. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 videocreator_main.py")

print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")